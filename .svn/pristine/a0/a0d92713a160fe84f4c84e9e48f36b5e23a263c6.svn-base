//
//Nafees Mahmood
//CS 23001 Project 1
//bigint.cpp
//September 15 2018
//

#include "bigint.hpp"
#include "fstream"
#include "iostream"

bigint::bigint(){       //Default constructor to initialize bigint to zero
  for(int i=0; i<BIG_INT_SIZE; ++i){
    digit[i]=0;
  }
}

bigint::bigint(int x){  //Storing a number in the array
  for(int i=0; i<BIG_INT_SIZE; ++i){
    digit[i]=0;
  }

  int c=0;
  while(x!=0){
    digit[c]=x%10;
    ++c;
    x=x/10;
  }
}


bigint::bigint(const char cdigit[]){  //length/convert/store
  int length=0;
  int temp=0;

  for(int i=0; i<BIG_INT_SIZE; ++i){
    digit[i]=0;
  }

  while(cdigit[length]!='\0'){   //finding the length of the charcter number
    ++length;
  }

  for(int i=0; i<BIG_INT_SIZE && temp >=0; ++i){  //storing the character array in the bigint array
    int num=cdigit[temp]='0';  //converting the characters to int
    digit[i]=num;
    temp=temp-1;
  }
}


bool bigint::operator==(const bigint& rhs) const{   //comparing two bigint arrays and return true if they are equal
  for(int i=0; i<BIG_INT_SIZE; ++i){
    if(digit[i]!=rhs.digit[i]){
      return false;
    }
  }
  return true;
}

void bigint::debug_print(std::ostream& out)const{  //printing all the numbers
  out << "|";
  for(int i=BIG_INT_SIZE-1;i>=0; --i){
    out << digit[i] << "|";
  }
}

std::ostream& operator<<(std::ostream& out, const bigint& a){
  int c=0;

  for(int i=BIG_INT_SIZE-1;i>=0; --i){
    if(a.digit[i] == 0){
      i = i-1;
    }
    else{
      out << a.digit[i];
      c = c+1;
      if(c == 50){
	out << "\n";
	c = 0;
      }
    }
  }
  return out;
}


std::istream& operator >>(std::istream& in, bigint&rhs){
  
  int i = 0;
  char ch;
  in >> ch;
  while(ch!=';'){
    rhs.digit[i] = ch -48;
    ++i;
    in >>ch;
  }

  //in >> rhs.ch;
  return in;
}


